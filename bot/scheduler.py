import logging
from datetime import date, timedelta

from apscheduler.schedulers.asyncio import AsyncIOScheduler

from bot.db.db import get_users
from bot.filters.filters import is_superadmin, is_admin, is_guide
from googlesheets.tours_filtering import filter_for_sa_date, filter_by_date

logger = logging.getLogger()


async def check_tours(bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    admins_notif = date.today() + timedelta(days=2)
    guides_notif = date.today() + timedelta(days=1)
    users = get_users()

    for user_id in users:
        try:
            if is_superadmin(user_id):
                tours = filter_for_sa_date(guides_notif)
                day = '–∑–∞–≤—Ç—Ä–∞'
            elif is_admin(user_id):
                tours = filter_by_date(admins_notif)
                day = '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞'
            elif is_guide(user_id):
                tours = filter_by_date(guides_notif, guide=user_id)
                day = '–∑–∞–≤—Ç—Ä–∞'
            else:
                continue

            if not tours:
                continue

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = (f"üîî –ù–∞ {day} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —ç–∫—Å–∫—É—Ä—Å–∏–π: {len(tours)}.\n"
                        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(chat_id=user_id, text=response, parse_mode="HTML")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user_id}: {e}")


def setup_scheduler(bot):
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(check_tours, 'cron', hour=11, minute=0, args=[bot])
    scheduler.start()
