import logging
from datetime import datetime

from aiogram import Router, F
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.types import CallbackQuery, Message
from gspread.exceptions import APIError

import bot.keyboards.keyboards as kb
from bot.filters.filters import IsAdmin
from bot.handlers.date_handlers import DateInputState
from bot.handlers.period_handlers import DatesInputState
from bot.texts.staff_texts import buttons, tripster_text, googledocs_text
from googlesheets.make_record import add_record
from tripster.tparsing import handle_tripster

router = Router()
router.message.filter(IsAdmin())

logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —á–∞—Å–∞
class HourInputState(StatesGroup):
    hour = State()


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∑–∞–∫–∞–∑–∞
class OrderInputState(StatesGroup):
    dt = State()
    tour_type = State()
    client_data = State()
    guides = State()
    price = State()
    guests = State()
    place = State()


async def save_record(message: Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets."""
    record_data = await state.get_data()

    new_record = [
        record_data.get('new_datetime').strftime('%d.%m.%Y'),
        record_data.get('new_datetime').strftime('%H:%M'),
        record_data.get('tour_type', ''),
        record_data.get('client_data', ''),
        record_data.get('guides', ''),
        record_data.get('price', ''),
        record_data.get('guests', ''),
        record_data.get('place', ''),
    ]

    try:
        add_record(new_record)
        await message.answer('‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Doc!')
    except APIError as e:
        await message.answer(f'‚ö† –û—à–∏–±–∫–∞ API Google Sheets: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    except TypeError:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥.')
    except Exception as e:
        logger.error(f'‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheet: {e}')

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()


@router.message(OrderInputState.place)
async def write_to_googledoc(message: Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ Google Sheets –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."""
    await state.update_data(place=message.text)
    await save_record(message, state)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/cancel" –≤ –ª—é–±—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö,
# –∫—Ä–æ–º–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.message(Command(commands='cancel'), ~StateFilter(default_state))
async def cmd_cancel(message: Message, state: FSMContext):
    current_state = await state.get_state()

    cancel_messages = {
        HourInputState.hour: '–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω–∞.',
        DateInputState.due_date: '–ü–æ–∏—Å–∫ —ç–∫—Å–∫—É—Ä—Å–∏–π –æ—Ç–º–µ–Ω—ë–Ω.',
        DatesInputState.start_date: '–ü–æ–∏—Å–∫ —ç–∫—Å–∫—É—Ä—Å–∏–π –æ—Ç–º–µ–Ω—ë–Ω.',
        DatesInputState.end_date: '–ü–æ–∏—Å–∫ —ç–∫—Å–∫—É—Ä—Å–∏–π –æ—Ç–º–µ–Ω—ë–Ω.',
        OrderInputState.dt: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
        OrderInputState.tour_type: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
        OrderInputState.client_data: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
        OrderInputState.guides: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
        OrderInputState.price: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
        OrderInputState.guests: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.'
    }

    if current_state in cancel_messages:
        await message.answer(text=cancel_messages[current_state])

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()


# –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@router.message(F.text == buttons['extra'])
async def make_extra_keyboard(message: Message):
    """ –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ' —Å–æ–∑–¥–∞—é—Ç—Å—è inline buttons —Å –¥–∞–ª—å–Ω–µ–π—à–∏–º –≤—ã–±–æ—Ä–æ–º. """
    await message.answer(text='–í–∞—à –≤—ã–±–æ—Ä',
                         reply_markup=kb.extra_keyboard)


@router.callback_query(F.data == 'tripster_pressed')
async def make_tripster_keyboard(callback: CallbackQuery):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ inline –ø–æ–¥–º–µ–Ω—é –∏–∑ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Tripster.
    """
    await callback.answer("")
    await callback.message.edit_text(text='–ß—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è?',
                                     reply_markup=kb.tripster_keyboard)


@router.callback_query(F.data == 'send_tdy_pressed')
async def handle_tripster_today(callback: CallbackQuery):
    """
     –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ —á–µ—Ä–µ–∑ WhatsApp web.
    """
    await callback.answer(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É üì©")

    try:
        messages_count = await handle_tripster(day='today')
        if messages_count:
            await callback.message.edit_text(
                text=f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ {messages_count}.',
                reply_markup=None
            )
        else:
            await callback.message.edit_text(
                text=tripster_text['no_tripster'],
                reply_markup=None
            )
    except Exception as e:
        logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}')


@router.callback_query(F.data == 'send_tmrw_pressed')
async def handle_tripster_tomorrow(callback: CallbackQuery):
    """
     –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ —á–µ—Ä–µ–∑ WhatsApp web.
    """
    await callback.answer(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É üì©")

    try:
        messages_count = await handle_tripster(day='tomorrow')
        if messages_count:
            await callback.message.edit_text(
                text=f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ {messages_count}.',
                reply_markup=None
            )
        else:
            await callback.message.edit_text(
                text=tripster_text['no_tripster'],
                reply_markup=None
            )
    except Exception as e:
        logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}')


@router.callback_query(F.data == 'late_orders_pressed')
async def handle_tripster_late(callback: CallbackQuery, state: FSMContext):
    """
     –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á–∞—Å (1 –¥–æ 23), —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–º–µ–Ω—Ç, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –∏—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
     –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ WhatsApp web.
    """
    await callback.message.edit_text(
        text=tripster_text['name_hour'],
        reply_markup=None
    )
    await state.set_state(HourInputState.hour)


@router.message(StateFilter(HourInputState.hour), lambda h: h.text.isdigit() and 1 <= int(h.text) <= 23)
async def handle_hour_input(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º.
    """
    try:
        hour = int(message.text)

        await message.answer(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É üì©")

        messages_count = await handle_tripster(update_hour=hour, day='today')
        if messages_count:
            await message.answer(
                text=f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ {messages_count}.'
            )
        else:
            await message.answer(
                text=tripster_text['no_tripster']
            )
    except Exception as e:
        logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {repr(e)}')
    finally:
        await state.clear()


@router.message(StateFilter(HourInputState.hour))
async def handle_incorrect_hour_input(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –µ—â—ë —Ä–∞–∑.
    """
    await message.answer(
        text=tripster_text['incorrect_hour']
    )


@router.callback_query(F.data == 'gdocs_pressed')
async def ask_for_datetime(callback: CallbackQuery, state: FSMContext):
    """ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏."""
    await callback.message.edit_text(
        text=googledocs_text['datetime'],
        reply_markup=None
    )
    await state.set_state(OrderInputState.dt)


@router.message(OrderInputState.dt)
async def get_datetime(message: Message, state: FSMContext):
    try:
        date_text = message.text
        if len(date_text.split()[0].split('.')[2]) == 2:  # –µ—Å–ª–∏ –≥–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —Ü–∏—Ñ—Ä
            date_text = date_text.replace(date_text.split()[0].split('.')[2], '20' + date_text.split()[0].split('.')[2])

        new_datetime = datetime.strptime(date_text, "%d.%m.%Y %H:%M")

        await state.update_data(new_datetime=new_datetime)
        await message.answer(text=googledocs_text['tour_type'],
                             reply_markup=None)
        await state.set_state(OrderInputState.tour_type)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú")
        return


@router.message(OrderInputState.tour_type)
async def get_tour_type(message: Message, state: FSMContext):
    await state.update_data(tour_type=message.text)
    await message.answer(text=googledocs_text['client_data'],
                         reply_markup=None)
    await state.set_state(OrderInputState.client_data)

    # try:
    #     tour_type = int(message.text)
    #     if not (1 <= tour_type <= 7):
    #         await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã. –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 7")
    #         return
    #     await state.update_data(tour_type=tour_type)
    #     await message.answer(text=googledocs_text['client_data'],
    #                          reply_markup=None)
    #     await state.set_state(OrderInputState.client_data)
    # except ValueError:
    #     await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã. –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 7")
    #     return


@router.message(Command(commands='log'), ~StateFilter(default_state))
async def cmd_log(message: Message, state: FSMContext):
    """ –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –∏ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ —ç–∫—Å–∫—É—Ä—Å–∏–∏ –≤ –¥–æ–∫—Å."""
    await save_record(message, state)


@router.message(OrderInputState.client_data)
async def add_client_data(message: Message, state: FSMContext):
    await state.update_data(client_data=message.text)
    await message.answer(text=googledocs_text['guides'],
                         reply_markup=None)
    await state.set_state(OrderInputState.guides)


@router.message(OrderInputState.guides)
async def add_guides(message: Message, state: FSMContext):
    await state.update_data(guides=message.text)
    await message.answer(text=googledocs_text['price'],
                         reply_markup=None)
    await state.set_state(OrderInputState.price)


@router.message(OrderInputState.price)
async def add_price(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    await message.answer(text=googledocs_text['guests'],
                         reply_markup=None)
    await state.set_state(OrderInputState.guests)


@router.message(OrderInputState.guests)
async def add_guides(message: Message, state: FSMContext):
    await state.update_data(guests=message.text)
    await message.answer(text=googledocs_text['place'],
                         reply_markup=None)
    await state.set_state(OrderInputState.place)


@router.message(OrderInputState.place)
async def write_to_googledoc(message: Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ google doc –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å."""
    await state.update_data(place=message.text)
    await save_record(message, state)
