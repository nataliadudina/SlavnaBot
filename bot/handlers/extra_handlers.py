import logging

from aiogram import Router, F
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.types import CallbackQuery, Message

import bot.keyboards.keyboards as kb
from bot.filters.filters import IsAdmin
from bot.handlers.date_handlers import DateInputState
from bot.handlers.period_handlers import DatesInputState
from bot.texts.staff_texts import buttons, tripster_text
from tripster.tparsing import handle_tripster

router = Router()
router.message.filter(IsAdmin())

logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —á–∞—Å–∞
class HourInputState(StatesGroup):
    hour = State()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/cancel" –≤ –ª—é–±—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö,
# –∫—Ä–æ–º–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.message(Command(commands='cancel'), ~StateFilter(default_state))
async def cmd_cancel(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == HourInputState.hour:
        await message.answer(
            text='–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω–∞.'
        )
    elif current_state in (DateInputState.due_date, DatesInputState.start_date, DatesInputState.end_date):
        await message.answer(
            text='–ü–æ–∏—Å–∫ —ç–∫—Å–∫—É—Ä—Å–∏–π –æ—Ç–º–µ–Ω—ë–Ω.'
        )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()


# –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@router.message(F.text == buttons['extra'])
async def make_extra_keyboard(message: Message):
    """ –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ' —Å–æ–∑–¥–∞—é—Ç—Å—è inline buttons —Å –¥–∞–ª—å–Ω–µ–π—à–∏–º –≤—ã–±–æ—Ä–æ–º. """
    await message.answer(text='–í–∞—à –≤—ã–±–æ—Ä',
                         reply_markup=kb.extra_keyboard)


@router.callback_query(F.data == 'tripster_pressed')
async def make_tripster_keyboard(callback: CallbackQuery):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ inline –ø–æ–¥–º–µ–Ω—é –∏–∑ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Tripster.
    """
    await callback.answer("")
    await callback.message.edit_text(text='–ß—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è?',
                                     reply_markup=kb.tripster_keyboard)


@router.callback_query(F.data == 'send_tdy_pressed')
async def handle_tripster_today(callback: CallbackQuery):
    """
     –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ —á–µ—Ä–µ–∑ WhatsApp web.
    """
    await callback.answer(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É üì©")

    try:
        messages_count = await handle_tripster(day='today')
        if messages_count:
            await callback.message.edit_text(
                text=f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ {messages_count}.',
                reply_markup=None
            )
        else:
            await callback.message.edit_text(
                text=tripster_text['no_tripster'],
                reply_markup=None
            )
    except Exception as e:
        logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}')


@router.callback_query(F.data == 'send_tmrw_pressed')
async def handle_tripster_tomorrow(callback: CallbackQuery):
    """
     –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ —á–µ—Ä–µ–∑ WhatsApp web.
    """
    await callback.answer(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É üì©")

    try:
        messages_count = await handle_tripster(day='tomorrow')
        if messages_count:
            await callback.message.edit_text(
                text=f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ {messages_count}.',
                reply_markup=None
            )
        else:
            await callback.message.edit_text(
                text=tripster_text['no_tripster'],
                reply_markup=None
            )
    except Exception as e:
        logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}')


@router.callback_query(F.data == 'late_orders_pressed')
async def handle_tripster_late(callback: CallbackQuery, state: FSMContext):
    """
     –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á–∞—Å (1 –¥–æ 23), —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–º–µ–Ω—Ç, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –∏—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
     –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ WhatsApp web.
    """
    await callback.message.edit_text(
        text=tripster_text['name_hour'],
        reply_markup=None
    )
    await state.set_state(HourInputState.hour)


@router.message(StateFilter(HourInputState.hour), lambda h: h.text.isdigit() and 1 <= int(h.text) <= 23)
async def handle_hour_input(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º.
    """
    try:
        hour = int(message.text)

        await message.answer(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É üì©")

        messages_count = await handle_tripster(update_hour=hour, day='today')
        if messages_count:
            await message.answer(
                text=f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ {messages_count}.'
            )
        else:
            await message.answer(
                text=tripster_text['no_tripster']
            )
    except Exception as e:
        logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {repr(e)}')
    finally:
        await state.clear()


@router.message(StateFilter(HourInputState.hour))
async def handle_incorrect_hour_input(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –µ—â—ë —Ä–∞–∑.
    """
    await message.answer(
        text=tripster_text['incorrect_hour']
    )
