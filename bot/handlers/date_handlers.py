import logging
from datetime import datetime, date, timedelta

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery

import bot.keyboards.keyboards as kb
from bot.filters.filters import IsAdminOrGuide, is_admin, is_guide
from bot.handlers.period_handlers import DatesInputState
from bot.keyboards.calendar import generate_calendar
from bot.keyboards.pagination_kb import create_pagination_keyboard
from bot.texts.staff_texts import buttons, replies
from googlesheets.tours_filtering import filter_by_date, filter_by_guide_on_date

router = Router()
router.message.filter(IsAdminOrGuide())

logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã
class DateInputState(StatesGroup):
    due_date = State()


# –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ reply button
@router.message(F.text == buttons['on_date'])
async def make_date_keyboard(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–≠–∫—Å–∫—É—Ä—Å–∏–∏ –Ω–∞ –¥–∞—Ç—É'.
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è inline buttons —Å –≤—ã–±–æ—Ä–æ–º.
    """
    await message.answer(text='–ß—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å?',
                         reply_markup=kb.date_keyboard)


# –≠—Ç–∏ —Ö—ç–Ω–¥–ª–µ—Ä—ã –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∞–ø–¥–µ–π—Ç—ã —Ç–∏–ø–∞ CallbackQuery
# –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ inline –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == 'date_pressed')
async def handle_date_tours(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ inline –∫–Ω–æ–ø–∫–∏ '–≠–∫—Å–∫—É—Ä—Å–∏–∏ –Ω–∞ –¥–∞—Ç—É'.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º.
    """
    today = datetime.today()
    keyboard = await generate_calendar(today.year, today.month)
    await callback.message.edit_text(text='–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –Ω–∞–π—Ç–∏ —ç–∫—Å–∫—É—Ä—Å–∏–∏?',
                                     reply_markup=keyboard)
    await callback.answer()
    await state.set_state(DateInputState.due_date)


@router.callback_query(lambda c: c.data.startswith("navigate_"))
async def navigate_calendar(callback_query: CallbackQuery):
    """ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é: –≤–ø–µ—Ä—ë–¥, –Ω–∞–∑–∞–¥. """
    _, year, month = callback_query.data.split("_")
    keyboard = await generate_calendar(int(year), int(month))
    await callback_query.message.edit_reply_markup(reply_markup=keyboard)
    await callback_query.answer()


@router.callback_query((F.data.startswith('date_') | F.data.in_(['today_pressed', 'tomorrow_pressed'])))
async def handle_near_tours(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã: —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞, –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ —ç–∫—Å–∫—É—Ä—Å–∏–π –∏–∑ googlesheet, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É.
    """
    await callback.answer(f"–ò—â—É —ç–∫—Å–∫—É—Ä—Å–∏–∏ üîé")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç callback.data
    if callback.data == 'today_pressed':
        orders_date = date.today()
    elif callback.data == 'tomorrow_pressed':
        orders_date = date.today() + timedelta(days=1)
    elif callback.data.startswith('date_'):
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –∏–∑ inline –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        selected_date = callback.data.split('_')[1]
        orders_date = datetime.strptime(selected_date, '%Y-%m-%d').date()
        await state.update_data(due_date=str(orders_date))
        # –ü–æ–∫–∞–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        selected_date = datetime.strftime(orders_date, '%d.%m.%Y')
        await callback.answer(selected_date)
    else:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –≤—ã–±–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω
    await state.clear()

    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback
    user_id = callback.from_user.id

    try:
        # –ü–æ–∏—Å–∫ —ç–∫—Å–∫—É—Ä—Å–∏–π –∏–∑ –≥—É–≥–ª –¥–æ–∫—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if is_admin(user_id):
            tours = filter_by_date(orders_date)
        # –ü–æ–∏—Å–∫ —ç–∫—Å–∫—É—Ä—Å–∏–π –∏–∑ –≥—É–≥–ª –¥–æ–∫—Å–∞ –¥–ª—è –≥–∏–¥–æ–≤
        elif is_guide(user_id):
            tours = filter_by_guide_on_date(user_id, orders_date)
        else:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Å–∫—É—Ä—Å–∏–π —É {user_id}: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not tours:
        await callback.message.answer(replies['no_excursions'])
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–∫—É—Ä—Å–∏—è—Ö –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    await state.update_data(tours=tours)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    current_page = 1
    total_pages = len(tours)
    tour = tours[current_page - 1]  # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0
    tour_info = "\n".join(f"<b>{header}</b>: {info}" for header, info in tour.items())

    await callback.message.edit_text(
        text=tour_info,
        reply_markup=create_pagination_keyboard(current_page, total_pages)
    )


@router.callback_query(F.data.startswith('page:'))
async def handle_pagination(callback: CallbackQuery, state: FSMContext):
    current_page = int(callback.data.split(":")[1])
    user_data = await state.get_data()
    tours = user_data.get("tours", [])

    if not tours or current_page < 1 or current_page > len(tours):
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
        return

    tour = tours[current_page - 1]
    tour_info = "\n".join(f"<b>{header}</b>: {info}" for header, info in tour.items())
    total_pages = len(tours)

    await callback.message.edit_text(
        text=tour_info,
        reply_markup=create_pagination_keyboard(current_page, total_pages)
    )
