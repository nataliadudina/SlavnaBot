import logging
from datetime import date, timedelta

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import Message, CallbackQuery

from bot.filters.filters import is_admin, is_guide, IsAdminOrGuide
import bot.keyboards.keyboards as kb
from bot.keyboards.pagination_kb import create_pagination_keyboard
from bot.texts.staff_texts import replies, buttons
from googlesheets.tours_filtering import filter_by_date, filter_by_guide_on_date

router = Router()
router.message.filter(IsAdminOrGuide())

logger = logging.getLogger(__name__)


# –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ reply button
@router.message(F.text == buttons['on_date'])
async def make_date_keyboard(message: Message):
    """ –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–≠–∫—Å–∫—É—Ä—Å–∏–∏ –Ω–∞ –¥–∞—Ç—É' —Å–æ–∑–¥–∞—é—Ç—Å—è inline buttons —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã. """
    await message.answer(text='–ß—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å?',
                         reply_markup=kb.date_keyboard)


# –≠—Ç–∏ —Ö—ç–Ω–¥–ª–µ—Ä—ã –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∞–ø–¥–µ–π—Ç—ã —Ç–∏–ø–∞ CallbackQuery
# –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ inline –∫–Ω–æ–ø–æ–∫

@router.callback_query(F.data.in_(['today_pressed', 'tomorrow_pressed']))
async def handle_near_tours(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —ç–∫—Å–∫—É—Ä—Å–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–∫—É—Ä—Å–∏—è—Ö, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞.
    """
    await callback.answer(f"–ò—â—É —ç–∫—Å–∫—É—Ä—Å–∏–∏ üîé")

    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback
    user_id = callback.from_user.id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç callback.data
    if callback.data == 'today_pressed':
        orders_date = date.today()
    elif callback.data == 'tomorrow_pressed':
        orders_date = date.today() + timedelta(days=1)
    else:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return
    try:
        # –ü–æ–∏—Å–∫ —ç–∫—Å–∫—É—Ä—Å–∏–π –∏–∑ –≥—É–≥–ª –¥–æ–∫—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if is_admin(user_id):
            tours = filter_by_date(orders_date)
        # –ü–æ–∏—Å–∫ —ç–∫—Å–∫—É—Ä—Å–∏–π –∏–∑ –≥—É–≥–ª –¥–æ–∫—Å–∞ –¥–ª—è –≥–∏–¥–æ–≤
        elif is_guide(user_id):
            tours = filter_by_guide_on_date(user_id, orders_date)
        else:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Å–∫—É—Ä—Å–∏–π —É {user_id}: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not tours:
        await callback.message.answer(replies['no_excursions'])
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–∫—É—Ä—Å–∏—è—Ö –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    await state.update_data(tours=tours)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    current_page = 1
    total_pages = len(tours)
    tour = tours[current_page - 1]  # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0
    tour_info = "\n".join(f"<b>{header}</b>: {info}" for header, info in tour.items())

    await callback.message.edit_text(
        text=tour_info,
        reply_markup=create_pagination_keyboard(current_page, total_pages)
    )


@router.callback_query(F.data == 'date_pressed')
async def handle_date_tours(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —ç–∫—Å–∫—É—Ä—Å–∏–π –Ω–∞ –¥–∞—Ç—É.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–∫—É—Ä—Å–∏—è—Ö, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É.
    """
    await callback.answer(f"–ò—â—É —ç–∫—Å–∫—É—Ä—Å–∏–∏ üîé")
    # –¥–æ–ø–∏—Å–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ


@router.callback_query(F.data.startswith('page:'))
async def handle_pagination(callback: CallbackQuery, state: FSMContext):
    current_page = int(callback.data.split(":")[1])
    user_data = await state.get_data()
    tours = user_data.get("tours", [])

    if not tours or current_page < 1 or current_page > len(tours):
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
        return

    tour = tours[current_page - 1]
    tour_info = "\n".join(f"<b>{header}</b>: {info}" for header, info in tour.items())
    total_pages = len(tours)

    await callback.message.edit_text(
        text=tour_info,
        reply_markup=create_pagination_keyboard(current_page, total_pages)
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/cancel" –≤ –ª—é–±—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö,
# –∫—Ä–æ–º–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.message(Command(commands='cancel'), ~StateFilter(default_state))
async def process_cancel_command_state(message: Message, state: FSMContext):
    await message.answer(
        text=''
    )
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()
