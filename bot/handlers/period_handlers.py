import asyncio
import logging
from datetime import datetime, date
from typing import Optional

from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message

import bot.keyboards.keyboards as kb
from bot.filters.filters import is_admin, is_guide, is_superadmin
from bot.keyboards.calendar import generate_calendar
from bot.texts.staff_texts import buttons, tour_texts
from googlesheets.tours_filtering import filter_by_period, filter_for_sa_period

router = Router()

logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç
class DatesInputState(StatesGroup):
    start_date = State()
    end_date = State()


async def send_tours_list(tours: list[dict], errors: list[str], message: Message,
                          start_date: Optional[str] = None, end_date: Optional[str] = None):
    """ –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —ç–∫—Å–∫—É—Ä—Å–∏—è–º–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ —ç–∫—Å–∫—É—Ä—Å–∏–π –Ω–µ—Ç."""
    if not tours and not errors:
        await message.answer(f"–ù–µ—Ç —ç–∫—Å–∫—É—Ä—Å–∏–π —Å {start_date} –ø–æ {end_date} ü•∫")
        return

    if tours:
        for row in tours:
            tour_info = "\n".join(f"<b>{header}</b>: {info}" for header, info in row.items())
            await message.answer(tour_info)

        if start_date and end_date:
            await message.answer(f"–° {start_date} –ø–æ {end_date} –Ω–∞–π–¥–µ–Ω–æ —ç–∫—Å–∫—É—Ä—Å–∏–π: {len(tours) + len(errors)}.")
        else:
            await message.answer(f'–í—Å–µ–≥–æ —ç–∫—Å–∫—É—Ä—Å–∏–π: {len(tours) + len(errors)}')

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
    if errors:
        errors_list = '\n'.join(errors)
        await message.answer(
            f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç–∫—Å–∫—É—Ä—Å–∏–π:\n"
            f"{errors_list}.\n–°–æ–æ–±—â–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


@router.message(F.text == buttons['on_period'])
async def make_period_keyboard(message: Message):
    """ –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–≠–∫—Å–∫—É—Ä—Å–∏–∏ –Ω–∞ –ø–µ—Ä–∏–æ–¥' —Å–æ–∑–¥–∞—é—Ç—Å—è inline buttons —Å –¥–∞–ª—å–Ω–µ–π—à–∏–º –≤—ã–±–æ—Ä–æ–º. """
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ on_period –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer(text='–ß—Ç–æ —Å–º–æ—Ç—Ä–∏–º?',
                         reply_markup=kb.period_keyboard)


@router.callback_query(F.data == 'period_pressed')
async def handle_period_tours(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ inline –∫–Ω–æ–ø–∫–∏ '–≠–∫—Å–∫—É—Ä—Å–∏–∏ –Ω–∞ –¥–∞—Ç—É'.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º.
    """
    today = datetime.today()
    keyboard = await generate_calendar(today.year, today.month, is_period=True)
    await callback.message.answer(text=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –¥–∞—Ç—É.\n\n"
                                       f"{tour_texts['cancel_search']}",
                                  reply_markup=keyboard)
    await callback.answer()
    await state.set_state(DatesInputState.start_date)
    await state.update_data(is_period=True)


@router.callback_query(lambda c: c.data.startswith("pnavigate_"))
async def navigate_period_calendar(callback_query: CallbackQuery, state: FSMContext):
    """ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é: –≤–ø–µ—Ä—ë–¥, –Ω–∞–∑–∞–¥. """
    user_data = await state.get_data()
    logger.info(f"State: {await state.get_state()}, User Data: {user_data}")

    if not user_data.get('is_period', False):
        logger.warning(f"User attempted to navigate calendar outside of period selection. Data: {callback_query.data}")
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return

    _, year, month = callback_query.data.split("_")
    year, month = int(year), int(month)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –∏ –º–µ—Å—è—Ü –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_year=year, current_month=month)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    keyboard = await generate_calendar(year, month, is_period=True)
    await callback_query.message.edit_reply_markup(reply_markup=keyboard)
    await callback_query.answer()


@router.callback_query(F.data.startswith('period_date_'), StateFilter(DatesInputState.start_date))
async def handle_start_date(callback: CallbackQuery, state: FSMContext):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞. """
    start_date_str = callback.data.split('_')[2]
    start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()  # –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(start_date=start_date_str,  current_year=start_date.year, current_month=start_date.month)

    # –ü–æ–∫–∞–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –∏ –∑–∞–ø—Ä–æ—Å –∫–æ–Ω–µ—á–Ω–æ–π
    await callback.answer(f"{start_date.strftime('%d.%m.%Y')}. –í—ã–±–µ—Ä–µ—Ç–µ –≤—Ç–æ—Ä—É—é –¥–∞—Ç—É.")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    user_data = await state.get_data()
    current_year = user_data.get("current_year", datetime.today().year)
    current_month = user_data.get("current_month", datetime.today().month)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –∏ —Å —É—á—ë—Ç–æ–º —Ä–∞–Ω–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
    keyboard = await generate_calendar(current_year, current_month, is_period=True, selected_start_date=start_date_str)
    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é –¥–∞—Ç—É.\n\n"
                                     f"{tour_texts['cancel_search']}",
                                     reply_markup=keyboard)
    await state.set_state(DatesInputState.end_date)


@router.callback_query(F.data.startswith('period_date_'), StateFilter(DatesInputState.end_date))
async def handle_end_date(callback: CallbackQuery, state: FSMContext):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞. """
    end_date_str = callback.data.split('_')[2]
    end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date()

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    start_date_str = user_data.get("start_date")
    start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞
    if end_date < start_date:
        start_date, end_date = end_date, start_date

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É
    await state.update_data(end_date=end_date_str)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞
    first_date = start_date.strftime('%d.%m.%Y')
    second_date = end_date.strftime('%d.%m.%Y')
    await callback.answer(f"–ò—â—É –∑–∞–∫–∞–∑—ã —Å {first_date} –ø–æ {second_date} üïù ...")
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, —Ç.–∫. –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–µ–ª—å–∑—è
    await asyncio.sleep(0.5)
    await callback.message.delete()

    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    await state.update_data(current_year=None, current_month=None)

    # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ–±–µ–∏—Ö –¥–∞—Ç –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
    await handle_tours_by_period(callback, state)


@router.callback_query(F.data.startswith('period_date_') & F.state == DatesInputState.end_date)
async def handle_tours_by_period(callback: CallbackQuery, state: FSMContext):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—É—Ä–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥. """
    user_data = await state.get_data()
    start_date_str = user_data.get("start_date")
    end_date_str = user_data.get("end_date")

    start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()
    end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date()

    if start_date < date.today() and end_date < date.today():
        await callback.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. "
                                      "–í–æ–∑–º–æ–∂–µ–Ω –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —ç–∫—Å–∫—É—Ä—Å–∏–π. üòà")
        return

    if end_date < start_date:
        start_date, end_date = end_date, start_date

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–∞—Ç
    first_date = start_date.strftime('%d.%m.%Y')
    second_date = end_date.strftime('%d.%m.%Y')
    user_id = callback.from_user.id

    try:
        if is_superadmin(user_id):
            tours, errors = filter_for_sa_period(start_date, end_date)
        elif is_admin(user_id):
            tours, errors = filter_by_period(start_date, end_date)
        elif is_guide(user_id):
            tours, errors = filter_by_period(start_date, end_date, guide=user_id)
        else:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–∫—Å–∫—É—Ä—Å–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥ –¥–ª—è {user_id}: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    await send_tours_list(tours, errors, callback.message, first_date, second_date)

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()


@router.callback_query(F.data == 'all_tours_pressed')
async def handle_all_tours(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫–∞–∑ –≤—Å–µ—Ö —ç–∫—Å–∫—É—Ä—Å–∏–π –∏–ª–∏ —ç–∫—Å–∫—É—Ä—Å–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ googlesheet –æ–±–æ –≤—Å–µ—Ö —ç–∫—Å–∫—É—Ä—Å–∏—è—Ö –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
    """
    user_id = callback.from_user.id
    await callback.answer("–ò—â—É –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä—ã ‚è≥")

    try:
        if is_superadmin(user_id):
            tours, errors = filter_for_sa_period()
        # –ü–æ–∏—Å–∫ —ç–∫—Å–∫—É—Ä—Å–∏–π –∏–∑ –≥—É–≥–ª –¥–æ–∫—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
        elif is_admin(user_id):
            tours, errors = filter_by_period()
        # –ü–æ–∏—Å–∫ —ç–∫—Å–∫—É—Ä—Å–∏–π –∏–∑ –≥—É–≥–ª –¥–æ–∫—Å–∞ –¥–ª—è –≥–∏–¥–æ–≤
        elif is_guide(user_id):
            tours, errors = filter_by_period(guide=user_id)
        else:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Å–∫—É—Ä—Å–∏–π —É {user_id}: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    await send_tours_list(tours, errors, callback.message)
