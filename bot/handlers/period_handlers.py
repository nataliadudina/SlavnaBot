import logging

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message

import bot.keyboards.keyboards as kb
from bot.filters.filters import is_admin, is_guide
from bot.texts.staff_texts import replies, buttons
from googlesheets.tours_filtering import filter_by_period, filter_by_guide_on_period

router = Router()

logger = logging.getLogger(__name__)


@router.message(F.text == buttons['on_period'])
async def make_period_keyboard(message: Message):
    """ –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–≠–∫—Å–∫—É—Ä—Å–∏–∏ –Ω–∞ –ø–µ—Ä–∏–æ–¥' —Å–æ–∑–¥–∞—é—Ç—Å—è inline buttons —Å –¥–∞–ª—å–Ω–µ–π—à–∏–º –≤—ã–±–æ—Ä–æ–º. """
    await message.answer(text='–ß—Ç–æ —Å–º–æ—Ç—Ä–∏–º?',
                         reply_markup=kb.period_keyboard)


@router.callback_query(F.data == 'all_tours_pressed')
async def handle_all_tours(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —ç–∫—Å–∫—É—Ä—Å–∏–π.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–∫—Å–∫—É—Ä—Å–∏—è—Ö.
    """

    await callback.answer(f"–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —ç–∫—Å–∫—É—Ä—Å–∏–∏ üìù")

    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback
    user_id = callback.from_user.id

    try:
        # –ü–æ–∏—Å–∫ —ç–∫—Å–∫—É—Ä—Å–∏–π –∏–∑ –≥—É–≥–ª –¥–æ–∫—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
        if is_admin(user_id):
            tours = filter_by_period()
        # –ü–æ–∏—Å–∫ —ç–∫—Å–∫—É—Ä—Å–∏–π –∏–∑ –≥—É–≥–ª –¥–æ–∫—Å–∞ –¥–ª—è –≥–∏–¥–æ–≤
        elif is_guide(user_id):
            tours = filter_by_guide_on_period(user_id)
        else:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Å–∫—É—Ä—Å–∏–π —É {user_id}: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not tours:
        await callback.message.answer(replies['no_excursions'])
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–∫—É—Ä—Å–∏—è—Ö
    for row in tours:
        tour_info = "\n".join(f"<b>{header}</b>: {info}" for header, info in row.items())
        await callback.message.answer(tour_info)


@router.callback_query(F.data == 'period_pressed')
async def handle_period_tours(callback: CallbackQuery):
    """
   –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —ç–∫—Å–∫—É—Ä—Å–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥.
   –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –≤—Å–µ—Ö —ç–∫—Å–∫—É—Ä—Å–∏—è—Ö –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
   """
    await callback.answer(f"–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —ç–∫—Å–∫—É—Ä—Å–∏–∏.")
    # –¥–æ–ø–∏—Å–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–∞–º
